generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(255)
  email        String         @unique
  password     String         @db.VarChar(255)
  address      String?        @db.VarChar(255)
  verified     Boolean        @default(false)
  image        String?        @db.VarChar(255)
  phone        String?        @db.VarChar(255)
  createdAt    DateTime?      @default(now())
  verification String?        @db.VarChar(255)
  reviewId     String?
  Review       Review[]
  ReviewReport ReviewReport[]
  isTop        Boolean        @default(false)

  @@map("users")
}

model FooterSetting {
  id          String @id @default(uuid())
  content     String @db.LongText
  topsearches String @unique
}

model BlogCategory {
  id   String   @id @default(uuid())
  name String   @unique
  date DateTime @default(now())
}

model blogComment {
  id      String   @id @default(uuid())
  name    String
  email   String
  postid  String
  active  Boolean?
  message String
  date    DateTime @default(now())
}

model Blog {
  id              String   @id @default(uuid())
  title           String
  alt             String
  description     String   @db.LongText
  image           String
  metaTitle       String
  metaDescription String   @db.LongText
  metaKeywords    String
  tags            String
  category        String
  faq             Json
  table           String?
  date            DateTime @default(now())
}

model CompanyListing {
  id           String         @id @default(uuid())
  userId       String?
  companyName  String?
  categoryId   String?
  logo         String?
  websiteLink  String         @unique
  about        String?
  city         String?
  pincode      String?
  physical     Boolean        @default(false)
  email        String?
  phone        String?
  address      String?
  date         DateTime       @default(now())
  verifyCode   String?
  status       Boolean        @default(false)
  hasadmin     Boolean?
  Review       Review[]
  ReviewReport ReviewReport[]

  @@map("company_listings")
}

model Review {
  id           String          @id @default(uuid())
  name         String
  email        String
  title        String
  review       String
  rating       Int
  date         DateTime        @default(now())
  createdAt    DateTime        @default(now())
  active       Boolean?
  reply        String?
  user         User?           @relation(fields: [userId], references: [id])
  userId       String
  listing      CompanyListing? @relation(fields: [listingId], references: [id])
  listingId    String
  ReviewReport ReviewReport[]

  @@map("reviews")
}

model ReviewReport {
  id        String         @id @default(uuid())
  report    String
  userId    String
  user      User?          @relation(fields: [userId], references: [id])
  listingId String
  listing   CompanyListing @relation(fields: [listingId], references: [id])
  reviewId  String
  review    Review         @relation(fields: [reviewId], references: [id])
  date      DateTime       @default(now())

  @@map("review_report")
}

model Category {
  id    String  @id @default(uuid())
  title String
  onTop Boolean @default(false)

  @@map("category")
}

// -------------------------------------------------------------------

model businessUsers {
  id           String    @id @default(uuid())
  fname        String    @db.VarChar(255)
  lname        String    @db.VarChar(255)
  email        String    @unique
  website      String?   @db.VarChar(255)
  companyname  String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  complete     Boolean?  @default(false)
  verified     Boolean   @default(false)
  password     String?   @db.VarChar(255)
  jobtitle     String?   @db.VarChar(255)
  phone        String?   @db.VarChar(255)
  country      String?   @db.VarChar(255)
  createdAt    DateTime? @default(now())
  verification String?   @db.VarChar(255)
  acountType   String    @db.VarChar(255)
  static_code  String?   @db.VarChar(255)

  @@map("business_users")
}
